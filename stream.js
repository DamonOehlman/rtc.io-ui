var attach = require('rtc-attach');
var kgo = require('kgo');
var chain = require('whisk/chain');
var attrib = require('fdom/attrib');
var append = require('fdom/append');
var tweak = require('fdom/classtweak');

/**
  ### `rtc-ui/stream`

  Provides a number of helper functions for rendering both local and remote
  streams to the DOM.  Also provides a top level `streamui` function that chain
  be used as a quickconnect "plugin" to automatically wire up these helper
  functions for typical usage.

  An example of usage is provided below:

  <<< examples/conference.js

  #### `streamui(qc, opts)`

  Link standard quickconnect events to sensible streamui handlers.  Use `opts`
  to provide configuration to the handler functions, notably:

  - `container` - the container element in which new elements will be created
    within and searches for element removal will be constrained to. Defaults
    to `document.body`.

  - `plugins` - If you are using any rtc.io plugins specify these here to have
    them passed on to `rtc-attach` for integration.

**/
var streamui = module.exports = function(qc, opts) {
  var container = (opts || {}).container || document.body;

  qc
  .on('stream:added', streamui.add(container, opts))
  .on('stream:removed', streamui.remove(container, opts))
  .on('call:ended', streamui.remove(container, opts));
};

/**
  #### `streamui.local(container, opts?) => fn(stream)`

  Create a handler function specifying a target container and any
  additional options.  The handler function expects a single argument
  of `stream` for which a rendering element will be created and added
  to the specified container.

  This element will have the `rtc` abd `localvideo` classes applied to
  it so can be styled using CSS by your app.

**/
streamui.local = function(container, opts) {
  return function(stream) {
    // use kgo to help with flow control
    kgo({ stream: stream, options: opts })
    ('attach', [ 'stream', 'options' ], attach.local)
    ('render-local', [ 'attach' ], chain([
      tweak('+rtc'),
      tweak('+localvideo'),
      append.to(container)
    ]))
    .on('error', console.error.bind(console));
  };
};

/**
  #### `streamui.add(container, opts?) => fn(id, stream)`

  Create a handler function that is designed to respond to `stream:added`
  events generated by `rtc-quickconnect` (i.e it follows the `(id, stream)` function
  signature).  A renderer element will be created for the stream and appended
  to the `container` element.

  This element will have the `rtc` and `remotevideo` classes applied to it, and
  will also have `data-peer` and `data-stream` attributes set on the created
  element.

**/
streamui.add = function(container, opts) {
  return function(id, stream) {
    kgo({ stream: stream, options: opts })
    ('attach', [ 'stream', 'options' ], attach)
    ('render-remote', [ 'attach' ], chain([
      tweak('+rtc'),
      tweak('+remotevideo'),
      attrib('data-peer', id),
      attrib('data-stream', stream.label),
      append.to(container)
    ]))
    .on('error', console.error.bind(console));
  };
};

/**
  #### `streamui.remove(container, opts?) => fn(id, stream?)`

  Create a handler function that is designed to respond to both `stream:removed`
  and `call:ended` events generated by `rtc-quickconnect`.  When the handler is
  invoked with just an id, all elements with the `data-peer` matching the
  specified value will be removed from `container`.  If a `stream` argument value
  is supplied, then only those matching the `data-stream` label will be removed.

**/
streamui.remove = function(container, opts) {
  return function(id, stream) {
    var selector = 'data-peer="' + id + '"';

    // build the selector
    if (stream) {
      selector += ' data-stream="' + stream.label + '"';
    }

    qsa(video + '[' + selector + ']', container).forEach(function(el) {
      el.parentNode.removeChild(el);
    });
  };
};
